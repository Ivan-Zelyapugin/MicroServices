services:
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: collabodb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network_2

  redis:
    image: redis:7
    container_name: auth_redis
    ports:
      - "6379:6379"
    networks:
      - app-network_2

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - app-network_2

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - app-network_2

  authservice:
    image: authservice
    container_name: auth_service
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      AUTH_PEPPER: "6h5nDgI5vV4kYbL0lmB6eJTTdD0w2w5d2NZJwX4xYYkB0QF7C1mV2xM7yQtJbRkS"
    depends_on:
      - db
      - redis
      - kafka
    ports:
      - "5000:80"
    networks:
      - app-network_2

  emailservice:
    image: emailservice
    container_name: email_service
    build:
      context: ./EmailService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:80
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      - kafka
    ports:
      - "5001:80"
    networks:
      - app-network_2

  documentservice:
    image: documentservice
    container_name: document_service
    build:
      context: ./DocumentService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:80
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      - db
    ports:
      - "5002:80"
    networks:
      - app-network_2

  blockservice:
    image: blockservice
    container_name: block_service
    build:
      context: ./BlockService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:80
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      - db
    ports:
      - "5003:80"
    networks:
      - app-network_2

  voiceservice:
    image: voiceservice
    container_name: voice_service
    build:
      context: ./VoiceChatService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:80
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      - redis
    ports:
      - "5004:80"
    networks:
      - app-network_2

  database:
    container_name: database_migrator
    build:
      context: ./Database
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    depends_on:
      - db
    networks:
      - app-network_2
    restart: "no"

      
  nginx:
    image: nginx:1.25
    container_name: nginx_gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./CollaboCraftFront/build:/usr/share/nginx/html:ro
    ports:
      - "80:80"
    depends_on:
      - authservice
      - emailservice
      - documentservice
    networks:
      - app-network_2

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network_2

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network_2
      
networks:
  app-network_2:
    driver: bridge

volumes:
  postgres-data:
  minio_data: